"""Custom

Revision ID: custom1
Revises: 40719081ddf9
Create Date: 2022-07-22 01:41:34.401337

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import MetaData, select, Table
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'custom1'
down_revision = '40719081ddf9'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(None, 'login_history', ['id'])
    op.create_unique_constraint(None, 'roles', ['id'])
    op.create_unique_constraint(None, 'social_accounts', ['id'])
    op.add_column('users', sa.Column('date_of_birth', sa.Date(), nullable=False))
    op.create_unique_constraint(None, 'users', ['id', 'email', 'date_of_birth'])
    op.create_unique_constraint(None, 'users', ['id'])
    op.create_unique_constraint(None, 'users_roles', ['id'])
    # ### end Alembic commands ###

    # creating partition tables
    op.execute("""
        CREATE TABLE  "users_partitioned" (
        id uuid not null,
        login TEXT not null ,
        password TEXT not null,
        email TEXT not null,
        date_of_birth timestamp default now() not null,
        PRIMARY KEY (id, email, date_of_birth)
        ) PARTITION BY RANGE (date_of_birth);
    """)
    #
    #
    op.execute("""
        CREATE TABLE IF NOT EXISTS "users_birthdays_1920_to_1979"
        PARTITION OF "users_partitioned"
        FOR VALUES FROM ('1920-01-01') TO ('1979-12-31');
        """)

    op.execute("""
        CREATE TABLE IF NOT EXISTS "users_birthdays_1980_to_2003"
        PARTITION OF "users_partitioned"
        FOR VALUES FROM ('1980-01-01') TO ('2003-12-31');
        """)

    op.execute("""
        CREATE TABLE IF NOT EXISTS "users_birthdays_2004_to_2022"
        PARTITION OF "users_partitioned"
        FOR VALUES FROM ('2004-01-01') TO ('2022-12-31');
        """)

    # # find existing tables
    # meta = MetaData(bind=op.get_bind())
    # meta.reflect(only=("users", "users_partitioned"))
    # users_table = Table("users", meta)
    # users_partitioned_table = Table(
    #     "users_partitioned", meta
    # )
    #
    # # insert existing data into partitioned table
    # select_stmt = select(users_table)
    # insert_stmt = users_partitioned_table.insert().from_select(
    #     users_partitioned_table.columns, select_stmt
    # )
    # op.execute(insert_stmt)
    #
    # # foreign keys - doesnot work
    # op.create_foreign_key("fk_user_id", "login_history", "users_partitioned",
    #                       ["user_id"], ["id"], ondelete="CASCADE")
    # op.drop_constraint("login_history_user_id_fkey", "login_history",
    #                    type_="foreign_key")
    # # replace tables
    # op.drop_table("users")
    # op.rename_table("users_partitioned", "users")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users_roles', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'date_of_birth')
    op.drop_constraint(None, 'social_accounts', type_='unique')
    op.drop_constraint(None, 'roles', type_='unique')
    op.drop_constraint(None, 'login_history', type_='unique')
    # ### end Alembic commands ###

    # op.rename_table("users", "users_partitioned")
    #
    # op.create_table('users',
    #                 sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    #                 sa.Column('login', sa.String(), nullable=False),
    #                 sa.Column('password', sa.String(), nullable=False),
    #                 sa.Column('email', sa.String(), nullable=False),
    #                 sa.PrimaryKeyConstraint('id'),
    #                 sa.UniqueConstraint('email'),
    #                 sa.UniqueConstraint('id'),
    #                 sa.UniqueConstraint('login')
    #                 )
    #
    # # find existing tables
    # meta = MetaData(bind=op.get_bind())
    # meta.reflect(only=("users", "users_partitioned"))
    # users_partitioned_table = Table(
    #     "users_partitioned", meta
    # )
    # users_table = Table("users", meta)
    #
    # # insert existing data from partitioned table
    # select_stmt = select(users_partitioned_table)
    # insert_stmt = users_table.insert().from_select(
    #     users_table.columns, select_stmt
    # )
    # op.execute(insert_stmt)

    op.drop_table("users_birthdays_1920_to_1979")
    op.drop_table("users_birthdays_1980_to_2003")
    op.drop_table("users_birthdays_2004_to_2022")
    op.drop_table("users_partitioned")
